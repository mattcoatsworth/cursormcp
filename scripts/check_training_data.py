import os
from datetime import datetime, timedelta
from supabase import create_client, Client
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

print("Loading environment variables...")
url: str = os.environ.get("SUPABASE_URL")
key: str = os.environ.get("SUPABASE_SERVICE_ROLE_KEY")

print(f"Supabase URL: {url}")
print(f"Supabase Key present: {'Yes' if key else 'No'}")

if not url or not key:
    print("Error: Missing Supabase credentials")
    exit(1)

print("Initializing Supabase client...")
supabase: Client = create_client(url, key)

def check_llm_training_data():
    """Check training data generated by the external LLM."""
    try:
        print("Checking for LLM-generated training data...")
        
        result = supabase.table("training_data") \
            .select("*") \
            .eq("source_type", "external_llm") \
            .order("created_at", desc=True) \
            .limit(20) \
            .execute()

        print(f"Query result: {result}")
        
        if not result.data:
            print("No LLM-generated training data found in the database")
            return

        print(f"\nFound {len(result.data)} LLM-generated training examples:")
        print("-" * 80)

        for idx, example in enumerate(result.data, 1):
            print(f"\nExample {idx}:")
            print(f"Tool: {example.get('tool')}")
            print(f"Intent: {example.get('intent')}")
            print(f"Query: {example.get('query')}")
            print(f"Response: {example.get('response')}")
            print(f"Systems: {', '.join(example.get('systems', []))}")
            print(f"Workflow: {', '.join(example.get('workflow', []))}")
            print(f"Created at: {example.get('created_at')}")
            print(f"Source Type: {example.get('source_type')}")
            print("-" * 80)

    except Exception as e:
        print(f"Error checking training data: {str(e)}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    print("Starting training data check...")
    check_llm_training_data()
    print("Check completed.") 